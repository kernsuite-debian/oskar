/**

\page install_guide Installation Guide

\latexonly
\def \docversion{8}
\endlatexonly

\section install_intro Introduction

OSKAR can be installed by following the steps described below.
A source code archive for Linux, and binary installer packages for
macOS and Windows platforms are available to download from:<br/>
http://oskar.oerc.ox.ac.uk/

\subsection install_linux Linux

\subsubsection install_linux_install Installation

To install the OSKAR package on a Linux system, you will need to compile it
from source. Ensure the dependencies have been installed as described
in \ref install_deps "Dependencies" (below).
Then download the archive and follow the short steps
in \ref install_build "Building OSKAR".

If using a GPU on Linux, also be sure to install the latest NVIDIA
driver from your distribution's repository, or from
https://www.geforce.com/drivers

\subsubsection install_linux_uninstall Uninstallation

To remove the OSKAR package on Linux, delete the applications, libraries and
headers installed by the <code>make install</code> step.
By default, these will be placed in:

- Applications: <code>/usr/local/bin/oskar*</code>
- Libraries: <code>/usr/local/lib/liboskar*</code>
- Headers: <code>/usr/local/include/oskar/</code>

\subsection install_macos macOS

\subsubsection install_macos_install Installation

To install the OSKAR package on macOS, download and open the disk image (DMG)
file and drag the OSKAR.app bundle to your /Applications folder.
After installation, double-click the OSKAR.app bundle to launch the GUI and
set symbolic links to the applications in /usr/local/bin.

If using a GPU on macOS, also be sure to install the latest NVIDIA CUDA
driver from http://www.nvidia.com/object/mac-driver-archive.html

\subsubsection install_macos_uninstall Uninstallation

To remove the OSKAR package on macOS, delete the OSKAR.app bundle from
your /Applications folder, and delete symbolic links to the applications
by typing <code>rm -f /usr/local/bin/oskar*</code> from a terminal prompt.

\latexonly
\newpage
\endlatexonly

\subsection install_windows Windows

\subsubsection install_windows_install Installation

To install the OSKAR package on 64-bit Windows, download and run the
installer executable and follow the on-screen instructions.
After installation, the GUI can be launched using the shortcut on the
Desktop or Start Menu.

If using a GPU on Windows, also be sure to install the latest NVIDIA
driver from<br/> https://www.geforce.com/drivers

\subsubsection install_windows_uninstall Uninstallation

To remove the OSKAR package on Windows, uninstall it from the list of
software in Control Panel in the usual way.

\section install_deps Dependencies

If GPU acceleration is required, an NVIDIA GPU with CUDA 5.5 or later
(and associated NVIDIA CUDA driver) must be installed.
If the graphical user interface (GUI) is required, Qt must also be installed.
Additionally, the casacore libraries must be present if Measurement Sets
are to be exported.

The dependencies are:

- CMake (https://cmake.org), version >= 3.1
- [Optional] NVIDIA CUDA <br/>(https://developer.nvidia.com/cuda-downloads), version >= 5.5
- [Optional] Qt 5 (https://www.qt.io)
- [Optional] casacore (https://github.com/casacore/casacore), version >= 1.5.0

\section install_build Building OSKAR

To build OSKAR, open a terminal and give the following commands:

\code
$ mkdir build
$ cd build
$ cmake [OPTIONS] ../top/level/source/folder
$ make -j8
\endcode

OSKAR can then be installed with:

\code
$ make install
\endcode

You may need to run this command as root, unless you change the default
install location as described in the next section.

\subsection install_build_options Build Options

When running the 'cmake' command a number of build options can be specified.
These are as listed below.
- <tt><b>-DCUDA_ARCH="<arch>"</b></tt> (default: all)
  - Sets the target architecture for the compilation of CUDA device code
  - \<arch\> must be one of either: 1.3, 2.0, 2.1, 3.0, 3.2, 3.5, 3.7, 5.0, 5.2, 6.0, 6.1, 6.2, 7.0 or ALL
  - ALL is for all Kepler, Maxwell and Pascal architectures (>= 3.0).
  - Multiple architectures can be specified by separating them with semi-colons.

- <tt><b>-DCMAKE_INSTALL_PREFIX=\<path\></b></tt>  (default: /usr/local/)
  - Path prefix used to install OSKAR (with make install)

\subsubsection install_build_advanced Advanced Build Options

- <tt><b>-DCASACORE_LIB_DIR=\<path\></b></tt> (default: searches the system library paths)
  - Specifies a custom path in which to look for the CasaCore libraries (libcasa_ms.so and others).
  - Note: This should only be used if the CasaCore library in the system library path can't be used to build OSKAR.

- <tt><b>-DCASACORE_INC_DIR=\<path\></b></tt> (default: searches the system include paths)
  - Specifies a custom path in which to look for the CasaCore library headers. This is the path to the top level casacore include folder.
  - Note: This should only be used if the CasaCore headers in the system include path can't be used to build OSKAR.

- <tt><b>-DCMAKE_PREFIX_PATH=\<path\></b></tt> (default: None)
  - Specifies a location in which to search for Qt 5. For example, if
    using Homebrew on macOS, this may need to be set to /usr/local/opt/qt5/

- <tt><b>-DCMAKE_BUILD_TYPE=\<release, debug, or RelWithDebInfo\></b></tt>  (default: release)
  - Build OSKAR with release flags, debug flags, or release flags with
    debugging symbols.

- <tt><b>-DFIND_CUDA=ON|OFF</b></tt> (default: ON)
  - Can be used to tell the build system not to find or link against CUDA.

- <tt><b>-DNVCC_COMPILER_BINDIR=\<path\></b></tt> (default: None)
  - Specifies a nvcc compiler binary directory override. See nvcc help.
  - Note: This is likely to be needed only on macOS when the version of the compiler picked up by nvcc (which is related to the version of XCode being used) is incompatible with the current version of CUDA.
  - Set this to 'clang' on macOS if using GCC to build the rest of OSKAR.

- <tt><b>-DFORCE_LIBSTDC++=ON|OFF</b></tt> (default: OFF)
  - If ON forces the use of libstdc++ with the Clang compiler.
  - Note: Used for controlling linking behaviour when using clang or clang-omp compilers with dependencies which may have been compiled against libstdc++

- <tt><b>-DBUILD_INFO=ON|OFF</b></tt> (default: OFF)
  - If ON enables the display of diagnostic build information when running CMake.


\subsection install_build_qt Custom (Non-System) Qt Installations

If Qt 5 cannot be found from the default system paths, make sure to set
CMAKE_PREFIX_PATH as described above.

\section install_test Testing the Installation

\subsection install_unit_tests Unit Tests

The unit test binaries can be run by typing the following command from the
build directory:

\code
$ ctest [--verbose]
\endcode

All the unit tests should pass. If any fail, please report this by copying
the terminal output and sending it, together with a description of the
hardware in your machine, your operating system version and your version of
OSKAR, to the email address oskar@oerc.ox.ac.uk.

\subsection install_test_example Running the Example Simulation

With any fresh install of OSKAR, we recommend running the
\ref example "example simulation" to establish if a simple simulation
behaves as expected.

\latexonly
\vskip 1cm
\endlatexonly

<b>Revision History</b>

<table>
<tr><th>Revision</th><th>Date</th><th>Modification</th></tr>
<tr><td>1</td><td>2012-04-23</td><td>Creation.</td></tr>
<tr><td>2</td><td>2012-06-13</td>
    <td>Added description of new CMAKE build flags specifying the location
    of custom library search paths for LAPACK, CBLAS and CFITSIO.
    Added note on using custom (non-system) Qt4 installations.</td></tr>
<tr><td>3</td><td>2012-06-19</td>
    <td>Added description of new CMAKE flags for specifying the location of
    CPPUNIT and CasaCore added in OSKAR-2.0.3-beta.</td></tr>
<tr><td>4</td><td>2013-04-12</td>
    <td>Added description of MATLAB_ROOT CMAKE variable.</td></tr>
<tr><td>5</td><td>2013-11-14</td>
    <td>Updated for version 2.3.0. Removed CppUnit dependency.
    Unit tests now use the Google testing framework, which is included in
    the OSKAR source tree.</td></tr>
<tr><td>6</td><td>2014-09-30</td>
    <td>Changed default CUDA_ARCH to all.</td></tr>
<tr><td>7</td><td>2015-02-28</td>
    <td>Removed explicit CFITSIO and CBLAS dependencies.
    Clarified dependency requirements. Removed MATLAB references.</td></tr>
<tr><td>8</td><td>2017-10-30</td>
    <td>Removed LAPACK dependencies.
    Marked CUDA and Qt dependencies as optional.
    Added note describing how to set a non-standard path for Qt 5.
    Added options to not find (or link against) CUDA.
    Added note to describe how to compile for multiple CUDA architectures.
    Updated required CMake version to 3.1.
    Added platform-specific guidelines.
    </td></tr>
</table>

*/
